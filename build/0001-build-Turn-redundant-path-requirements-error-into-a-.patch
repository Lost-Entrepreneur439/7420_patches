From 9ba1c8658c84ed35cf6cbfea1d60b5fe65c02adb Mon Sep 17 00:00:00 2001
From: Alessandro Astone <ales.astone@gmail.com>
Date: Sun, 7 Mar 2021 21:41:02 +0100
Subject: [PATCH 1/3] build: Turn redundant path requirements error into a
 warning

* The change I3bf5f36125167af546dd967464a56d77f2bf3a3a added
  the vendor.lineage.power hidl interface to the exclusion list,
  however the 64 bit library is only generated by 64 bit targets.
  This would trigger the redundant requirements check for targets
  like lineage_arm or lineage_x86.

* There is really no need for this to be an error, so make it
  a warning instead.

Change-Id: I3ddf9cd6a2d8b60dc0df508c2fa14877f0f54356
---
 core/artifact_path_requirements.mk |  8 ++++----
 core/main.mk                       | 11 ++++++++++-
 2 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/core/artifact_path_requirements.mk b/core/artifact_path_requirements.mk
index ceaefa2696..13cde81e20 100644
--- a/core/artifact_path_requirements.mk
+++ b/core/artifact_path_requirements.mk
@@ -31,12 +31,12 @@ $(foreach makefile,$(ARTIFACT_PATH_REQUIREMENT_PRODUCTS),\
   $(eval allowed_patterns := $(call resolve-product-relative-paths,$(allowed))) \
   $(eval files := $(call product-installed-files, $(makefile))) \
   $(eval offending_files := $(filter-out $(path_patterns) $(allowed_patterns) $(static_allowed_patterns),$(files))) \
-  $(call maybe-print-list-and-error,$(offending_files),\
+  $(call maybe-print-list-and-warn,$(offending_files),\
     $(makefile) produces files outside its artifact path requirement. \
     Allowed paths are $(subst $(space),$(comma)$(space),$(addsuffix *,$(requirements)))) \
   $(eval unused_allowed := $(filter-out $(files),$(allowed_patterns))) \
   $(if $(PRODUCTS.$(makefile).ARTIFACT_PATH_REQUIREMENT_IS_RELAXED),, \
-    $(call maybe-print-list-and-error,$(unused_allowed),$(makefile) includes redundant allowed entries in its artifact path requirement.) \
+    $(call maybe-print-list-and-warn,$(unused_allowed),$(makefile) includes redundant allowed entries in its artifact path requirement.) \
   ) \
   $(eval ### Optionally verify that nothing else produces files inside this artifact path requirement.) \
   $(eval extra_files := $(filter-out $(files) $(HOST_OUT)/%,$(product_target_FILES))) \
@@ -47,12 +47,12 @@ $(foreach makefile,$(ARTIFACT_PATH_REQUIREMENT_PRODUCTS),\
   $(eval offending_files := $(filter-out $(allowed_patterns),$(files_in_requirement))) \
   $(eval enforcement := $(PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS)) \
   $(if $(enforcement),\
-    $(call maybe-print-list-and-error,$(offending_files),\
+    $(call maybe-print-list-and-warn,$(offending_files),\
       $(INTERNAL_PRODUCT) produces files inside $(makefile)s artifact path requirement. \
       $(PRODUCT_ARTIFACT_PATH_REQUIREMENT_HINT)) \
     $(eval unused_allowed := $(if $(filter true strict,$(enforcement)),\
       $(foreach p,$(allowed_patterns),$(if $(filter $(p),$(extra_files)),,$(p))))) \
-    $(call maybe-print-list-and-error,$(unused_allowed),$(INTERNAL_PRODUCT) includes redundant artifact path requirement allowed list entries.) \
+    $(call maybe-print-list-and-warn,$(unused_allowed),$(INTERNAL_PRODUCT) includes redundant artifact path requirement allowed list entries.) \
   ) \
 )
 $(PRODUCT_OUT)/offending_artifacts.txt:
diff --git a/core/main.mk b/core/main.mk
index 23982198f2..b43826d6ba 100644
--- a/core/main.mk
+++ b/core/main.mk
@@ -1274,11 +1274,20 @@ endef
 # $(1): list of files to print
 # $(2): heading to print on failure
 define maybe-print-list-and-error
+$(if $(strip $(1)), \
+  $(call maybe-print-list-and-warn,$(1),$(2)) \
+  $(error Build failed) \
+)
+endef
+
+# Warns if the given list is non-empty, and prints it entries (stripping PRODUCT_OUT).
+# $(1): list of files to print
+# $(2): heading to print
+define maybe-print-list-and-warn
 $(if $(strip $(1)), \
   $(warning $(2)) \
   $(info Offending entries:) \
   $(foreach e,$(sort $(1)),$(info    $(patsubst $(PRODUCT_OUT)/%,%,$(e)))) \
-  $(error Build failed) \
 )
 endef
 
-- 
2.37.1

