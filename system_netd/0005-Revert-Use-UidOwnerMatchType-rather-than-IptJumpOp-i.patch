From 9b9711a6884502acb9b391a022ddd79e216cb496 Mon Sep 17 00:00:00 2001
From: Dominggoes Isakh <drjisakh@gmail.com>
Date: Tue, 14 Dec 2021 12:00:25 +0100
Subject: [PATCH 5/9] Revert "Use UidOwnerMatchType rather than IptJumpOp in
 TrafficController"

This reverts commit 7db39b9dc40432b5ab698144fcaedc6ef44f9aea.
---
 server/BandwidthController.cpp   | 12 ++++----
 server/BandwidthController.h     |  3 +-
 server/TrafficController.cpp     | 24 +++++++++++++---
 server/TrafficController.h       |  4 +--
 server/TrafficControllerTest.cpp | 48 ++++++++++++++++----------------
 5 files changed, 53 insertions(+), 38 deletions(-)

diff --git a/server/BandwidthController.cpp b/server/BandwidthController.cpp
index 17622d75..b3a4fd88 100644
--- a/server/BandwidthController.cpp
+++ b/server/BandwidthController.cpp
@@ -323,24 +323,24 @@ int BandwidthController::enableDataSaver(bool enable) {
 }
 
 int BandwidthController::addNaughtyApps(const std::vector<uint32_t>& appUids) {
-    return manipulateSpecialApps(appUids, PENALTY_BOX_MATCH, IptOpInsert);
+    return manipulateSpecialApps(appUids, IptJumpReject, IptOpInsert);
 }
 
 int BandwidthController::removeNaughtyApps(const std::vector<uint32_t>& appUids) {
-    return manipulateSpecialApps(appUids, PENALTY_BOX_MATCH, IptOpDelete);
+    return manipulateSpecialApps(appUids, IptJumpReject, IptOpDelete);
 }
 
 int BandwidthController::addNiceApps(const std::vector<uint32_t>& appUids) {
-    return manipulateSpecialApps(appUids, HAPPY_BOX_MATCH, IptOpInsert);
+    return manipulateSpecialApps(appUids, IptJumpReturn, IptOpInsert);
 }
 
 int BandwidthController::removeNiceApps(const std::vector<uint32_t>& appUids) {
-    return manipulateSpecialApps(appUids, HAPPY_BOX_MATCH, IptOpDelete);
+    return manipulateSpecialApps(appUids, IptJumpReturn, IptOpDelete);
 }
 
 int BandwidthController::manipulateSpecialApps(const std::vector<uint32_t>& appUids,
-                                               UidOwnerMatchType matchType, IptOp op) {
-    Status status = gCtls->trafficCtrl.updateUidOwnerMap(appUids, matchType, op);
+                                               IptJumpOp jumpHandling, IptOp op) {
+    Status status = gCtls->trafficCtrl.updateUidOwnerMap(appUids, jumpHandling, op);
     if (!isOk(status)) {
         ALOGE("unable to update the Bandwidth Uid Map: %s", toString(status).c_str());
     }
diff --git a/server/BandwidthController.h b/server/BandwidthController.h
index 3b71460e..fa201570 100644
--- a/server/BandwidthController.h
+++ b/server/BandwidthController.h
@@ -24,7 +24,6 @@
 #include <mutex>
 
 #include "NetdConstants.h"
-#include "netdbpf/bpf_shared.h"
 
 class BandwidthController {
 public:
@@ -90,7 +89,7 @@ public:
 
     std::string makeDataSaverCommand(IptablesTarget target, bool enable);
 
-    int manipulateSpecialApps(const std::vector<uint32_t>& appStrUids, UidOwnerMatchType matchType,
+    int manipulateSpecialApps(const std::vector<uint32_t>& appStrUids, IptJumpOp jumpHandling,
                               IptOp appOp);
 
     int runIptablesAlertCmd(IptOp op, const std::string& alertName, int64_t bytes);
diff --git a/server/TrafficController.cpp b/server/TrafficController.cpp
index 29d04a39..7e29656c 100644
--- a/server/TrafficController.cpp
+++ b/server/TrafficController.cpp
@@ -533,6 +533,17 @@ Status TrafficController::updateOwnerMapEntry(UidOwnerMatchType match, uid_t uid
     return netdutils::status::ok;
 }
 
+UidOwnerMatchType TrafficController::jumpOpToMatch(BandwidthController::IptJumpOp jumpHandling) {
+    switch (jumpHandling) {
+        case BandwidthController::IptJumpReject:
+            return PENALTY_BOX_MATCH;
+        case BandwidthController::IptJumpReturn:
+            return HAPPY_BOX_MATCH;
+        case BandwidthController::IptJumpNoAdd:
+            return NO_MATCH;
+    }
+}
+
 Status TrafficController::removeRule(uint32_t uid, UidOwnerMatchType match) {
     auto oldMatch = mUidOwnerMap.readValue(uid);
     if (oldMatch.ok()) {
@@ -576,17 +587,22 @@ Status TrafficController::addRule(uint32_t uid, UidOwnerMatchType match, uint32_
 }
 
 Status TrafficController::updateUidOwnerMap(const std::vector<uint32_t>& appUids,
-                                            UidOwnerMatchType matchType,
+                                            BandwidthController::IptJumpOp jumpHandling,
                                             BandwidthController::IptOp op) {
     std::lock_guard guard(mMutex);
+    UidOwnerMatchType match = jumpOpToMatch(jumpHandling);
+    if (match == NO_MATCH) {
+        return statusFromErrno(
+                EINVAL, StringPrintf("invalid IptJumpOp: %d, command: %d", jumpHandling, match));
+    }
     for (uint32_t uid : appUids) {
         if (op == BandwidthController::IptOpDelete) {
-            RETURN_IF_NOT_OK(removeRule(uid, matchType));
+            RETURN_IF_NOT_OK(removeRule(uid, match));
         } else if (op == BandwidthController::IptOpInsert) {
-            RETURN_IF_NOT_OK(addRule(uid, matchType));
+            RETURN_IF_NOT_OK(addRule(uid, match));
         } else {
             // Cannot happen.
-            return statusFromErrno(EINVAL, StringPrintf("invalid IptOp: %d, %d", op, matchType));
+            return statusFromErrno(EINVAL, StringPrintf("invalid IptOp: %d, %d", op, match));
         }
     }
     return netdutils::status::ok;
diff --git a/server/TrafficController.h b/server/TrafficController.h
index deda05c3..ceaf0ecd 100644
--- a/server/TrafficController.h
+++ b/server/TrafficController.h
@@ -113,8 +113,8 @@ class TrafficController {
     netdutils::Status removeUidInterfaceRules(const std::vector<int32_t>& uids) EXCLUDES(mMutex);
 
     netdutils::Status updateUidOwnerMap(const std::vector<uint32_t>& appStrUids,
-                                        UidOwnerMatchType matchType, BandwidthController::IptOp op)
-            EXCLUDES(mMutex);
+                                        BandwidthController::IptJumpOp jumpHandling,
+                                        BandwidthController::IptOp op) EXCLUDES(mMutex);
     static const String16 DUMP_KEYWORD;
 
     int toggleUidOwnerMap(ChildChain chain, bool enable) EXCLUDES(mMutex);
diff --git a/server/TrafficControllerTest.cpp b/server/TrafficControllerTest.cpp
index 159fb086..6090a66f 100644
--- a/server/TrafficControllerTest.cpp
+++ b/server/TrafficControllerTest.cpp
@@ -617,66 +617,66 @@ TEST_F(TrafficControllerTest, TestReplaceSameChain) {
 
 TEST_F(TrafficControllerTest, TestDenylistUidMatch) {
     std::vector<uint32_t> appUids = {1000, 1001, 10012};
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, PENALTY_BOX_MATCH, BandwidthController::IptOpInsert)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReject,
+                                           BandwidthController::IptOpInsert)));
     expectUidOwnerMapValues(appUids, PENALTY_BOX_MATCH, 0);
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, PENALTY_BOX_MATCH, BandwidthController::IptOpDelete)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReject,
+                                           BandwidthController::IptOpDelete)));
     expectMapEmpty(mFakeUidOwnerMap);
 }
 
 TEST_F(TrafficControllerTest, TestAllowlistUidMatch) {
     std::vector<uint32_t> appUids = {1000, 1001, 10012};
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, HAPPY_BOX_MATCH, BandwidthController::IptOpInsert)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReturn,
+                                           BandwidthController::IptOpInsert)));
     expectUidOwnerMapValues(appUids, HAPPY_BOX_MATCH, 0);
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, HAPPY_BOX_MATCH, BandwidthController::IptOpDelete)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReturn,
+                                           BandwidthController::IptOpDelete)));
     expectMapEmpty(mFakeUidOwnerMap);
 }
 
 TEST_F(TrafficControllerTest, TestReplaceMatchUid) {
     std::vector<uint32_t> appUids = {1000, 1001, 10012};
     // Add appUids to the denylist and expect that their values are all PENALTY_BOX_MATCH.
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, PENALTY_BOX_MATCH, BandwidthController::IptOpInsert)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReject,
+                                           BandwidthController::IptOpInsert)));
     expectUidOwnerMapValues(appUids, PENALTY_BOX_MATCH, 0);
 
     // Add the same UIDs to the allowlist and expect that we get PENALTY_BOX_MATCH |
     // HAPPY_BOX_MATCH.
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, HAPPY_BOX_MATCH, BandwidthController::IptOpInsert)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReturn,
+                                           BandwidthController::IptOpInsert)));
     expectUidOwnerMapValues(appUids, HAPPY_BOX_MATCH | PENALTY_BOX_MATCH, 0);
 
     // Remove the same UIDs from the allowlist and check the PENALTY_BOX_MATCH is still there.
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, HAPPY_BOX_MATCH, BandwidthController::IptOpDelete)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReturn,
+                                           BandwidthController::IptOpDelete)));
     expectUidOwnerMapValues(appUids, PENALTY_BOX_MATCH, 0);
 
     // Remove the same UIDs from the denylist and check the map is empty.
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, PENALTY_BOX_MATCH, BandwidthController::IptOpDelete)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReject,
+                                           BandwidthController::IptOpDelete)));
     ASSERT_FALSE(mFakeUidOwnerMap.getFirstKey().ok());
 }
 
 TEST_F(TrafficControllerTest, TestDeleteWrongMatchSilentlyFails) {
     std::vector<uint32_t> appUids = {1000, 1001, 10012};
     // If the uid does not exist in the map, trying to delete a rule about it will fail.
-    ASSERT_FALSE(isOk(
-            mTc.updateUidOwnerMap(appUids, HAPPY_BOX_MATCH, BandwidthController::IptOpDelete)));
+    ASSERT_FALSE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReturn,
+                                            BandwidthController::IptOpDelete)));
     expectMapEmpty(mFakeUidOwnerMap);
 
     // Add denylist rules for appUids.
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, HAPPY_BOX_MATCH, BandwidthController::IptOpInsert)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReturn,
+                                           BandwidthController::IptOpInsert)));
     expectUidOwnerMapValues(appUids, HAPPY_BOX_MATCH, 0);
 
     // Delete (non-existent) denylist rules for appUids, and check that this silently does
     // nothing if the uid is in the map but does not have denylist match. This is required because
     // NetworkManagementService will try to remove a uid from denylist after adding it to the
     // allowlist and if the remove fails it will not update the uid status.
-    ASSERT_TRUE(isOk(
-            mTc.updateUidOwnerMap(appUids, PENALTY_BOX_MATCH, BandwidthController::IptOpDelete)));
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap(appUids, BandwidthController::IptJumpReject,
+                                           BandwidthController::IptOpDelete)));
     expectUidOwnerMapValues(appUids, HAPPY_BOX_MATCH, 0);
 }
 
@@ -725,7 +725,7 @@ TEST_F(TrafficControllerTest, TestRemoveUidInterfaceFilteringRules) {
 
 TEST_F(TrafficControllerTest, TestUidInterfaceFilteringRulesCoexistWithExistingMatches) {
     // Set up existing PENALTY_BOX_MATCH rules
-    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap({1000, 1001, 10012}, PENALTY_BOX_MATCH,
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap({1000, 1001, 10012}, BandwidthController::IptJumpReject,
                                            BandwidthController::IptOpInsert)));
     expectUidOwnerMapValues({1000, 1001, 10012}, PENALTY_BOX_MATCH, 0);
 
@@ -737,7 +737,7 @@ TEST_F(TrafficControllerTest, TestUidInterfaceFilteringRulesCoexistWithExistingM
     expectUidOwnerMapValues({10013, 10014}, IIF_MATCH, iif1);
 
     // Removing some PENALTY_BOX_MATCH rules should not change uid interface rule
-    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap({1001, 10012}, PENALTY_BOX_MATCH,
+    ASSERT_TRUE(isOk(mTc.updateUidOwnerMap({1001, 10012}, BandwidthController::IptJumpReject,
                                            BandwidthController::IptOpDelete)));
     expectUidOwnerMapValues({1000}, PENALTY_BOX_MATCH, 0);
     expectUidOwnerMapValues({10012, 10013, 10014}, IIF_MATCH, iif1);
-- 
2.37.1

