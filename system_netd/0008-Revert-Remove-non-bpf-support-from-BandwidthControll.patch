From 2203163cd2c9efb79cda226318bc81db0c24b87e Mon Sep 17 00:00:00 2001
From: Dominggoes Isakh <drjisakh@gmail.com>
Date: Tue, 14 Dec 2021 13:17:00 +0100
Subject: [PATCH 8/9] Revert "Remove non-bpf support from BandwidthController"

This reverts commit 03e3f7bc49540fe31fcce1edb3c68ba6706fdf27.
---
 server/BandwidthController.cpp     |  88 ++++++++++++-----
 server/BandwidthController.h       |   7 +-
 server/BandwidthControllerTest.cpp | 149 +++++++++++++++++++++--------
 server/Controllers.cpp             |   1 +
 4 files changed, 180 insertions(+), 65 deletions(-)

diff --git a/server/BandwidthController.cpp b/server/BandwidthController.cpp
index 88015098..a81aa551 100644
--- a/server/BandwidthController.cpp
+++ b/server/BandwidthController.cpp
@@ -83,6 +83,9 @@ namespace {
 const char ALERT_GLOBAL_NAME[] = "globalAlert";
 const std::string NEW_CHAIN_COMMAND = "-N ";
 
+const char NAUGHTY_CHAIN[] = "bw_penalty_box";
+const char NICE_CHAIN[] = "bw_happy_box";
+
 /**
  * Some comments about the rules:
  *  * Ordering
@@ -146,6 +149,10 @@ const std::string NEW_CHAIN_COMMAND = "-N ";
  */
 
 const std::string COMMIT_AND_CLOSE = "COMMIT\n";
+const std::string HAPPY_BOX_MATCH_ALLOWLIST_COMMAND =
+        StringPrintf("-I bw_happy_box -m owner --uid-owner %d-%d -j RETURN", 0, MAX_SYSTEM_UID);
+const std::string BPF_HAPPY_BOX_MATCH_ALLOWLIST_COMMAND = StringPrintf(
+        "-I bw_happy_box -m bpf --object-pinned %s -j RETURN", XT_BPF_ALLOWLIST_PROG_PATH);
 const std::string BPF_PENALTY_BOX_MATCH_DENYLIST_COMMAND = StringPrintf(
         "-I bw_penalty_box -m bpf --object-pinned %s -j REJECT", XT_BPF_DENYLIST_PROG_PATH);
 
@@ -205,8 +212,7 @@ static const uint32_t uidBillingMask = Fwmark::getUidBillingMask();
  * See go/ipsec-data-accounting for more information.
  */
 
-std::vector<std::string> getBasicAccountingCommands() {
-    // clang-format off
+std::vector<std::string> getBasicAccountingCommands(const bool useBpf) {
     std::vector<std::string> ipt_basic_accounting_commands = {
             "*filter",
 
@@ -215,14 +221,29 @@ std::vector<std::string> getBasicAccountingCommands() {
             "-A bw_INPUT -p esp -j RETURN",
             StringPrintf("-A bw_INPUT -m mark --mark 0x%x/0x%x -j RETURN", uidBillingMask,
                          uidBillingMask),
+            // This is ingress application UID xt_qtaguid (pre-ebpf) accounting,
+            // for bpf this is handled out of cgroup hooks instead.
+            useBpf ? "" : "-A bw_INPUT -m owner --socket-exists",
             StringPrintf("-A bw_INPUT -j MARK --or-mark 0x%x", uidBillingMask),
+
             "-A bw_OUTPUT -j bw_global_alert",
+            // Prevents IPSec double counting (Tunnel mode and Transport mode,
+            // respectively)
+            useBpf ? "" : "-A bw_OUTPUT -o " IPSEC_IFACE_PREFIX "+ -j RETURN",
+            useBpf ? "" : "-A bw_OUTPUT -m policy --pol ipsec --dir out -j RETURN",
+            // Don't count clat traffic, as it has already been counted (and subject to
+            // costly / happy_box / data_saver / penalty_box etc. based on the real UID)
+            // on the stacked interface.
+            useBpf ? "" : "-A bw_OUTPUT -m owner --uid-owner clat -j RETURN",
+            // This is egress application UID xt_qtaguid (pre-ebpf) accounting,
+            // for bpf this is handled out of cgroup hooks instead.
+            useBpf ? "" : "-A bw_OUTPUT -m owner --socket-exists",
+
             "-A bw_costly_shared -j bw_penalty_box",
-            ("-I bw_penalty_box -m bpf --object-pinned " XT_BPF_DENYLIST_PROG_PATH " -j REJECT"),
-            "-A bw_penalty_box -j bw_happy_box",
-            "-A bw_happy_box -j bw_data_saver",
+            useBpf ? BPF_PENALTY_BOX_MATCH_DENYLIST_COMMAND : "",
+            "-A bw_penalty_box -j bw_happy_box", "-A bw_happy_box -j bw_data_saver",
             "-A bw_data_saver -j RETURN",
-            ("-I bw_happy_box -m bpf --object-pinned " XT_BPF_ALLOWLIST_PROG_PATH " -j RETURN"),
+            useBpf ? BPF_HAPPY_BOX_MATCH_ALLOWLIST_COMMAND : HAPPY_BOX_MATCH_ALLOWLIST_COMMAND,
             "COMMIT",
 
             "*raw",
@@ -241,7 +262,8 @@ std::vector<std::string> getBasicAccountingCommands() {
             //
             // Hence we will never double count and additional corrections are not needed.
             // We can simply take the sum of base and stacked (+20B/pkt) interface counts.
-            ("-A bw_raw_PREROUTING -m bpf --object-pinned " XT_BPF_INGRESS_PROG_PATH),
+            useBpf ? "-A bw_raw_PREROUTING -m bpf --object-pinned " XT_BPF_INGRESS_PROG_PATH
+                   : "-A bw_raw_PREROUTING -m owner --socket-exists",
             "COMMIT",
 
             "*mangle",
@@ -257,9 +279,9 @@ std::vector<std::string> getBasicAccountingCommands() {
             // This is egress interface accounting: we account 464xlat traffic only on
             // the clat interface (as offloaded packets never hit base interface's ip6tables)
             // and later sum base and stacked with overhead (+20B/pkt) in higher layers
-            ("-A bw_mangle_POSTROUTING -m bpf --object-pinned " XT_BPF_EGRESS_PROG_PATH),
+            useBpf ? "-A bw_mangle_POSTROUTING -m bpf --object-pinned " XT_BPF_EGRESS_PROG_PATH
+                   : "-A bw_mangle_POSTROUTING -m owner --socket-exists",
             COMMIT_AND_CLOSE};
-    // clang-format on
     return ipt_basic_accounting_commands;
 }
 
@@ -269,6 +291,10 @@ std::vector<std::string> toStrVec(int num, const char* const strs[]) {
 
 }  // namespace
 
+void BandwidthController::setBpfEnabled(bool isEnabled) {
+    mBpfSupported = isEnabled;
+}
+
 BandwidthController::BandwidthController() {
 }
 
@@ -295,7 +321,7 @@ int BandwidthController::enableBandwidthControl() {
 
     flushCleanTables(false);
 
-    std::string commands = Join(getBasicAccountingCommands(), '\n');
+    std::string commands = Join(getBasicAccountingCommands(mBpfSupported), '\n');
     return iptablesRestoreFunction(V4V6, commands, nullptr);
 }
 
@@ -328,47 +354,61 @@ int BandwidthController::enableDataSaver(bool enable) {
 
 // TODO: Remove after removing these commands in CommandListener
 int BandwidthController::addNaughtyApps(int numUids, const char* const appUids[]) {
-    return manipulateSpecialApps(toStrVec(numUids, appUids), IptJumpReject, IptOpInsert);
+    return manipulateSpecialApps(toStrVec(numUids, appUids), NAUGHTY_CHAIN,
+                                 IptJumpReject, IptOpInsert);
 }
 
 // TODO: Remove after removing these commands in CommandListener
 int BandwidthController::removeNaughtyApps(int numUids, const char* const appUids[]) {
-    return manipulateSpecialApps(toStrVec(numUids, appUids), IptJumpReject, IptOpDelete);
+    return manipulateSpecialApps(toStrVec(numUids, appUids), NAUGHTY_CHAIN,
+                                 IptJumpReject, IptOpDelete);
 }
 
 // TODO: Remove after removing these commands in CommandListener
 int BandwidthController::addNiceApps(int numUids, const char* const appUids[]) {
-    return manipulateSpecialApps(toStrVec(numUids, appUids), IptJumpReturn, IptOpInsert);
+    return manipulateSpecialApps(toStrVec(numUids, appUids), NICE_CHAIN,
+                                 IptJumpReturn, IptOpInsert);
 }
 
 // TODO: Remove after removing these commands in CommandListener
 int BandwidthController::removeNiceApps(int numUids, const char* const appUids[]) {
-    return manipulateSpecialApps(toStrVec(numUids, appUids), IptJumpReturn, IptOpDelete);
+    return manipulateSpecialApps(toStrVec(numUids, appUids), NICE_CHAIN,
+                                 IptJumpReturn, IptOpDelete);
 }
 
 int BandwidthController::addNaughtyApps(const std::vector<std::string>& appStrUid) {
-    return manipulateSpecialApps(appStrUid, IptJumpReject, IptOpInsert);
+    return manipulateSpecialApps(appStrUid, NAUGHTY_CHAIN, IptJumpReject, IptOpInsert);
 }
 
 int BandwidthController::removeNaughtyApps(const std::vector<std::string>& appStrUid) {
-    return manipulateSpecialApps(appStrUid, IptJumpReject, IptOpDelete);
+    return manipulateSpecialApps(appStrUid, NAUGHTY_CHAIN, IptJumpReject, IptOpDelete);
 }
 
 int BandwidthController::addNiceApps(const std::vector<std::string>& appStrUid) {
-    return manipulateSpecialApps(appStrUid, IptJumpReturn, IptOpInsert);
+    return manipulateSpecialApps(appStrUid, NICE_CHAIN, IptJumpReturn, IptOpInsert);
 }
 
 int BandwidthController::removeNiceApps(const std::vector<std::string>& appStrUid) {
-    return manipulateSpecialApps(appStrUid, IptJumpReturn, IptOpDelete);
+    return manipulateSpecialApps(appStrUid, NICE_CHAIN, IptJumpReturn, IptOpDelete);
 }
 
 int BandwidthController::manipulateSpecialApps(const std::vector<std::string>& appStrUids,
-                                               IptJumpOp jumpHandling, IptOp op) {
-    Status status = gCtls->trafficCtrl.updateUidOwnerMap(appStrUids, jumpHandling, op);
-    if (!isOk(status)) {
-        ALOGE("unable to update the Bandwidth Uid Map: %s", toString(status).c_str());
-    }
-    return status.code();
+                                               const std::string& chain, IptJumpOp jumpHandling,
+                                               IptOp op) {
+    if (mBpfSupported) {
+        Status status = gCtls->trafficCtrl.updateUidOwnerMap(appStrUids, jumpHandling, op);
+        if (!isOk(status)) {
+            ALOGE("unable to update the Bandwidth Uid Map: %s", toString(status).c_str());
+      }
+      return status.code();
+    }
+    std::string cmd = "*filter\n";
+    for (const auto& appStrUid : appStrUids) {
+        StringAppendF(&cmd, "%s %s -m owner --uid-owner %s%s\n", opToString(op), chain.c_str(),
+                      appStrUid.c_str(), jumpToString(jumpHandling));
+    }
+    StringAppendF(&cmd, "COMMIT\n");
+    return iptablesRestoreFunction(V4V6, cmd, nullptr);
 }
 
 int BandwidthController::setInterfaceSharedQuota(const std::string& iface, int64_t maxBytes) {
diff --git a/server/BandwidthController.h b/server/BandwidthController.h
index 0c4f4110..b8691dcc 100644
--- a/server/BandwidthController.h
+++ b/server/BandwidthController.h
@@ -32,6 +32,7 @@ public:
     BandwidthController();
 
     int setupIptablesHooks();
+    void setBpfEnabled(bool isEnabled);
 
     int enableBandwidthControl();
     int disableBandwidthControl();
@@ -95,8 +96,8 @@ public:
 
     std::string makeDataSaverCommand(IptablesTarget target, bool enable);
 
-    int manipulateSpecialApps(const std::vector<std::string>& appStrUids, IptJumpOp jumpHandling,
-                              IptOp appOp);
+    int manipulateSpecialApps(const std::vector<std::string>& appStrUids, const std::string& chain,
+                              IptJumpOp jumpHandling, IptOp appOp);
 
     int runIptablesAlertCmd(IptOp op, const std::string& alertName, int64_t bytes);
     int runIptablesAlertFwdCmd(IptOp op, const std::string& alertName, int64_t bytes);
@@ -131,6 +132,8 @@ public:
     static const char *opToString(IptOp op);
     static const char *jumpToString(IptJumpOp jumpHandling);
 
+    bool mBpfSupported = false;
+
     int64_t mSharedQuotaBytes = 0;
     int64_t mSharedAlertBytes = 0;
     int64_t mGlobalAlertBytes = 0;
diff --git a/server/BandwidthControllerTest.cpp b/server/BandwidthControllerTest.cpp
index d635daf0..9953ecdf 100644
--- a/server/BandwidthControllerTest.cpp
+++ b/server/BandwidthControllerTest.cpp
@@ -50,6 +50,73 @@ using android::net::TunInterface;
 using android::netdutils::UniqueFile;
 using android::netdutils::status::ok;
 
+const std::string ACCOUNT_RULES_WITHOUT_BPF =
+        "*filter\n"
+        "-A bw_INPUT -j bw_global_alert\n"
+        "-A bw_INPUT -p esp -j RETURN\n"
+        "-A bw_INPUT -m mark --mark 0x100000/0x100000 -j RETURN\n"
+        "-A bw_INPUT -m owner --socket-exists\n"
+        "-A bw_INPUT -j MARK --or-mark 0x100000\n"
+        "-A bw_OUTPUT -j bw_global_alert\n"
+        "-A bw_OUTPUT -o ipsec+ -j RETURN\n"
+        "-A bw_OUTPUT -m policy --pol ipsec --dir out -j RETURN\n"
+        "-A bw_OUTPUT -m owner --uid-owner clat -j RETURN\n"
+        "-A bw_OUTPUT -m owner --socket-exists\n"
+        "-A bw_costly_shared -j bw_penalty_box\n"
+        "\n"
+        "-A bw_penalty_box -j bw_happy_box\n"
+        "-A bw_happy_box -j bw_data_saver\n"
+        "-A bw_data_saver -j RETURN\n"
+        "-I bw_happy_box -m owner --uid-owner 0-9999 -j RETURN\n"
+        "COMMIT\n"
+        "*raw\n"
+        "-A bw_raw_PREROUTING -i ipsec+ -j RETURN\n"
+        "-A bw_raw_PREROUTING -m policy --pol ipsec --dir in -j RETURN\n"
+        "-A bw_raw_PREROUTING -m owner --socket-exists\n"
+        "COMMIT\n"
+        "*mangle\n"
+        "-A bw_mangle_POSTROUTING -o ipsec+ -j RETURN\n"
+        "-A bw_mangle_POSTROUTING -m policy --pol ipsec --dir out -j RETURN\n"
+        "-A bw_mangle_POSTROUTING -j MARK --set-mark 0x0/0x100000\n"
+        "-A bw_mangle_POSTROUTING -m owner --uid-owner clat -j RETURN\n"
+        "-A bw_mangle_POSTROUTING -m owner --socket-exists\n"
+        "COMMIT\n";
+
+const std::string ACCOUNT_RULES_WITH_BPF =
+        "*filter\n"
+        "-A bw_INPUT -j bw_global_alert\n"
+        "-A bw_INPUT -p esp -j RETURN\n"
+        "-A bw_INPUT -m mark --mark 0x100000/0x100000 -j RETURN\n"
+        "\n"
+        "-A bw_INPUT -j MARK --or-mark 0x100000\n"
+        "-A bw_OUTPUT -j bw_global_alert\n"
+        "\n"
+        "\n"
+        "\n"
+        "\n"
+        "-A bw_costly_shared -j bw_penalty_box\n" +
+        StringPrintf("-I bw_penalty_box -m bpf --object-pinned %s -j REJECT\n",
+                     XT_BPF_DENYLIST_PROG_PATH) +
+        "-A bw_penalty_box -j bw_happy_box\n"
+        "-A bw_happy_box -j bw_data_saver\n"
+        "-A bw_data_saver -j RETURN\n" +
+        StringPrintf("-I bw_happy_box -m bpf --object-pinned %s -j RETURN\n",
+                     XT_BPF_ALLOWLIST_PROG_PATH) +
+        "COMMIT\n"
+        "*raw\n"
+        "-A bw_raw_PREROUTING -i ipsec+ -j RETURN\n"
+        "-A bw_raw_PREROUTING -m policy --pol ipsec --dir in -j RETURN\n" +
+        StringPrintf("-A bw_raw_PREROUTING -m bpf --object-pinned %s\n", XT_BPF_INGRESS_PROG_PATH) +
+        "COMMIT\n"
+        "*mangle\n"
+        "-A bw_mangle_POSTROUTING -o ipsec+ -j RETURN\n"
+        "-A bw_mangle_POSTROUTING -m policy --pol ipsec --dir out -j RETURN\n"
+        "-A bw_mangle_POSTROUTING -j MARK --set-mark 0x0/0x100000\n"
+        "-A bw_mangle_POSTROUTING -m owner --uid-owner clat -j RETURN\n" +
+        StringPrintf("-A bw_mangle_POSTROUTING -m bpf --object-pinned %s\n",
+                     XT_BPF_EGRESS_PROG_PATH) +
+        "COMMIT\n";
+
 class BandwidthControllerTest : public IptablesBaseTest {
 protected:
     BandwidthControllerTest() {
@@ -128,6 +195,23 @@ protected:
         EXPECT_CALL(mSyscalls, fclose(dummyFile)).WillOnce(Return(ok));
     }
 
+    void checkBandwithControl(bool useBpf) {
+        // Pretend no bw_costly_shared_<iface> rules already exist...
+        addIptablesRestoreOutput(
+                "-P OUTPUT ACCEPT\n"
+                "-N bw_costly_shared\n"
+                "-N unrelated\n");
+
+        // ... so none are flushed or deleted.
+        std::string expectedClean = "";
+
+        std::string expectedAccounting =
+                useBpf ? ACCOUNT_RULES_WITH_BPF : ACCOUNT_RULES_WITHOUT_BPF;
+        mBw.setBpfEnabled(useBpf);
+        mBw.enableBandwidthControl();
+        expectSetupCommands(expectedClean, expectedAccounting);
+    }
+
     StrictMock<android::netdutils::ScopedMockSyscalls> mSyscalls;
 };
 
@@ -163,46 +247,12 @@ TEST_F(BandwidthControllerTest, TestCheckUidBillingMask) {
     EXPECT_TRUE(isPowerOfTwo);
 }
 
-TEST_F(BandwidthControllerTest, TestEnableBandwidthControl) {
-    // Pretend no bw_costly_shared_<iface> rules already exist...
-    addIptablesRestoreOutput(
-            "-P OUTPUT ACCEPT\n"
-            "-N bw_costly_shared\n"
-            "-N unrelated\n");
-
-    // ... so none are flushed or deleted.
-    // clang-format off
-    static const std::string expectedClean = "";
-    static const std::string expectedAccounting =
-            "*filter\n"
-            "-A bw_INPUT -j bw_global_alert\n"
-            "-A bw_INPUT -p esp -j RETURN\n"
-            "-A bw_INPUT -m mark --mark 0x100000/0x100000 -j RETURN\n"
-            "-A bw_INPUT -j MARK --or-mark 0x100000\n"
-            "-A bw_OUTPUT -j bw_global_alert\n"
-            "-A bw_costly_shared -j bw_penalty_box\n"
-            "-I bw_penalty_box -m bpf --object-pinned " XT_BPF_DENYLIST_PROG_PATH " -j REJECT\n"
-            "-A bw_penalty_box -j bw_happy_box\n"
-            "-A bw_happy_box -j bw_data_saver\n"
-            "-A bw_data_saver -j RETURN\n"
-            "-I bw_happy_box -m bpf --object-pinned " XT_BPF_ALLOWLIST_PROG_PATH " -j RETURN\n"
-            "COMMIT\n"
-            "*raw\n"
-            "-A bw_raw_PREROUTING -i ipsec+ -j RETURN\n"
-            "-A bw_raw_PREROUTING -m policy --pol ipsec --dir in -j RETURN\n"
-            "-A bw_raw_PREROUTING -m bpf --object-pinned " XT_BPF_INGRESS_PROG_PATH "\n"
-            "COMMIT\n"
-            "*mangle\n"
-            "-A bw_mangle_POSTROUTING -o ipsec+ -j RETURN\n"
-            "-A bw_mangle_POSTROUTING -m policy --pol ipsec --dir out -j RETURN\n"
-            "-A bw_mangle_POSTROUTING -j MARK --set-mark 0x0/0x100000\n"
-            "-A bw_mangle_POSTROUTING -m owner --uid-owner clat -j RETURN\n"
-            "-A bw_mangle_POSTROUTING -m bpf --object-pinned " XT_BPF_EGRESS_PROG_PATH "\n"
-            "COMMIT\n";
-    // clang-format on
+TEST_F(BandwidthControllerTest, TestEnableBandwidthControlWithBpf) {
+    checkBandwithControl(true);
+}
 
-    mBw.enableBandwidthControl();
-    expectSetupCommands(expectedClean, expectedAccounting);
+TEST_F(BandwidthControllerTest, TestEnableBandwidthControlWithoutBpf) {
+    checkBandwithControl(false);
 }
 
 TEST_F(BandwidthControllerTest, TestDisableBandwidthControl) {
@@ -462,3 +512,24 @@ TEST_F(BandwidthControllerTest, CostlyAlert) {
     expectIptablesRestoreCommands(expected);
 }
 
+TEST_F(BandwidthControllerTest, ManipulateSpecialApps) {
+    std::vector<const char *> appUids = { "1000", "1001", "10012" };
+
+    std::vector<std::string> expected = {
+            "*filter\n"
+            "-I bw_happy_box -m owner --uid-owner 1000 -j RETURN\n"
+            "-I bw_happy_box -m owner --uid-owner 1001 -j RETURN\n"
+            "-I bw_happy_box -m owner --uid-owner 10012 -j RETURN\n"
+            "COMMIT\n"};
+    EXPECT_EQ(0, mBw.addNiceApps(appUids.size(), const_cast<char**>(&appUids[0])));
+    expectIptablesRestoreCommands(expected);
+
+    expected = {
+            "*filter\n"
+            "-D bw_penalty_box -m owner --uid-owner 1000 -j REJECT\n"
+            "-D bw_penalty_box -m owner --uid-owner 1001 -j REJECT\n"
+            "-D bw_penalty_box -m owner --uid-owner 10012 -j REJECT\n"
+            "COMMIT\n"};
+    EXPECT_EQ(0, mBw.removeNaughtyApps(appUids.size(), const_cast<char**>(&appUids[0])));
+    expectIptablesRestoreCommands(expected);
+}
diff --git a/server/Controllers.cpp b/server/Controllers.cpp
index 1f2bac22..b58fb89b 100644
--- a/server/Controllers.cpp
+++ b/server/Controllers.cpp
@@ -294,6 +294,7 @@ void Controllers::init() {
     }
     gLog.info("Initializing traffic control: %" PRId64 "us", s.getTimeAndResetUs());
 
+    bandwidthCtrl.setBpfEnabled(trafficCtrl.getBpfEnabled());
     bandwidthCtrl.enableBandwidthControl();
     gLog.info("Enabling bandwidth control: %" PRId64 "us", s.getTimeAndResetUs());
 
-- 
2.37.1

