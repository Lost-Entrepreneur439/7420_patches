From 7a9a9b3d44f1d1f1c4ec1b22d6504fadc1e434cb Mon Sep 17 00:00:00 2001
From: Lukas0610 <mail@lukasberger.at>
Date: Sat, 1 Sep 2018 12:16:45 +0200
Subject: [PATCH 9/9] netd: Allow devices to force-add directly-connected
 routes

Most sane devices have directly-connected routes properly
added by ConnectivityService, but a number of Samsung RIL
libraries seem to be doing "special" things, the end result
of which is IPv4 mobile data is non-functional due to lack
of a default route.

Affected devices have a log entry similar to the below:
  Error adding route 0.0.0.0/0 -> xxx.xxx.xxx.xxx rmnet0 to table 1002: Network is unreachable

This reverts, with guards, commit 92e8f96e43320efd5183d7452fb90883fd96415e.

Change-Id: I6a653d19c1c72c136e78d8d841e87d3c166698ea
---
 server/Android.bp          |  5 ++++-
 server/RouteController.cpp | 24 ++++++++++++++++++++++++
 server/RouteController.h   |  3 +++
 3 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/server/Android.bp b/server/Android.bp
index 9c89041a..bd9f6e3a 100644
--- a/server/Android.bp
+++ b/server/Android.bp
@@ -182,7 +182,10 @@ filegroup {
 // Modules common to both netd and netd_unit_test
 cc_library_static {
     name: "libnetd_server",
-    defaults: ["netd_defaults"],
+    defaults: [
+        "netd_defaults",
+        "needs_netd_direct_connect_rule_defaults",
+    ],
     include_dirs: [
         "system/netd/include",
         "system/netd/server/binder",
diff --git a/server/RouteController.cpp b/server/RouteController.cpp
index c455d358..023c7f10 100644
--- a/server/RouteController.cpp
+++ b/server/RouteController.cpp
@@ -51,6 +51,7 @@ auto RouteController::iptablesRestoreCommandFunction = execIptablesRestoreComman
 
 // BEGIN CONSTANTS --------------------------------------------------------------------------------
 
+
 const uint32_t ROUTE_TABLE_LOCAL_NETWORK  = 97;
 const uint32_t ROUTE_TABLE_LEGACY_NETWORK = 98;
 const uint32_t ROUTE_TABLE_LEGACY_SYSTEM  = 99;
@@ -721,6 +722,24 @@ int RouteController::configureDummyNetwork() {
     return 0;
 }
 
+#ifdef NEEDS_NETD_DIRECT_CONNECT_RULE
+// Add a new rule to look up the 'main' table, with the same selectors as the "default network"
+// rule, but with a lower priority. We will never create routes in the main table; it should only be
+// used for directly-connected routes implicitly created by the kernel when adding IP addresses.
+// This is necessary, for example, when adding a route through a directly-connected gateway: in
+// order to add the route, there must already be a directly-connected route that covers the gateway.
+[[nodiscard]] int addDirectlyConnectedRule() {
+    Fwmark fwmark;
+    Fwmark mask;
+
+    fwmark.netId = NETID_UNSET;
+    mask.netId = FWMARK_NET_ID_MASK;
+
+    return modifyIpRule(RTM_NEWRULE, RULE_PRIORITY_DIRECTLY_CONNECTED, RT_TABLE_MAIN,
+                        fwmark.intValue, mask.intValue, IIF_NONE, OIF_NONE, UID_ROOT, UID_ROOT);
+}
+#endif
+
 // Add an explicit unreachable rule close to the end of the prioriy list to make it clear that
 // relying on the kernel-default "from all lookup main" rule at priority 32766 is not intended
 // behaviour. We do flush the kernel-default rules at startup, but having an explicit unreachable
@@ -1159,6 +1178,11 @@ int RouteController::Init(unsigned localNetId) {
     if (int ret = addLocalNetworkRules(localNetId)) {
         return ret;
     }
+#ifdef NEEDS_NETD_DIRECT_CONNECT_RULE
+    if (int ret = addDirectlyConnectedRule()) {
+        return ret;
+    }
+#endif
     if (int ret = addUnreachableRule()) {
         return ret;
     }
diff --git a/server/RouteController.h b/server/RouteController.h
index 38d2d621..809a16d5 100644
--- a/server/RouteController.h
+++ b/server/RouteController.h
@@ -73,6 +73,9 @@ const uint32_t RULE_PRIORITY_UID_DEFAULT_NETWORK     = 27000;
 // the network, it will not work. That will potentially cause a user-visible error.
 const uint32_t RULE_PRIORITY_UID_DEFAULT_UNREACHABLE = 28000;
 const uint32_t RULE_PRIORITY_DEFAULT_NETWORK         = 29000;
+#ifdef NEEDS_NETD_DIRECT_CONNECT_RULE
+const uint32_t RULE_PRIORITY_DIRECTLY_CONNECTED      = 30000;
+#endif
 const uint32_t RULE_PRIORITY_UNREACHABLE             = 32000;
 // clang-format on
 
-- 
2.37.1

